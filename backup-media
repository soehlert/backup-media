#!/bin/bash
# shellcheck disable=SC2145,SC1083

# Bash script to backup my local media folders to my remote folders
# I use Plex, so the dirs here line up with the Plex Library type

##################################################################################################
# User defined variables --- Change these ---
#
# Who should own the files
USER='{{ backup_user }}'
# What group should own the files
GROUP='{{ backup_group }}'
# Permissions you want on end folder
PERMS='{{ backup_permissions }}'
# The base of the path you're backing up from
LBASE='{{ backup_lbase }}'
# The base of the path you're backing up to
RBASE='{{ backup_rbase }}'
# Movies from there to
LMOVIES=$LBASE/{{ backup_lmovies }}/
RMOVIES=$RBASE/{{ backup_rmovies }}/
# Music from there to
LMUSIC=$LBASE/{{ backup_lmusic }}/
RMUSIC=$RBASE/{{ backup_rmusic }}/
# TV from there to
LTV=$LBASE/{{ backup_ltv }}/
RTV=$RBASE/{{ backup_rtv }}/
# Other videos (Plex works best with Home Videos Library for videos that are not on IMDB or TVDB)
LHV=$LBASE/{{ backup_lhv }}/
RHV=$RBASE/{{ backup_rhv }}/
# ---These should work for most people ---
# Date format
DATE=$(date +%Y-%m-%d)
# Rsync options
Options=("--prune-empty-dirs --hard-links --human-readable --size-only --progress --recursive")
##################################################################################################

##################################################################################################
# Functions
#
# Set up help dialogue
Usage()
{
     echo -e "\nBackup script
===============================
Usage: backup -[dn] [-h] -m media_type
m: media type (movies|music|tv|homemov|other -manual-)
d: turn on rsync delete option
n: turn on rsync dryrun option
h: print this usage guide
\n"

     exit 1
}

AdjustPerms()
{
  chown -R "$USER":"$GROUP" "$1"
  chmod -R "$PERMS" "$1"
}

# Grab command line options
while getopts ":m:dnh" opt;
do
        case $opt in
                m)      media=$OPTARG
                ;;
                d)      Options+=("--delete ")
                ;;
                n)      Options+=("--dry-run ")
                ;;
                h)      Usage
                ;;
                \?)      echo "Invalid Option: -$OPTARG" >&2
                         exit 1
                ;;
                :)     echo "Option -$OPTARG requires an argument." >&2
                       exit 1
                ;;
     esac
done
##################################################################################################

##################################################################################################
# Where you want your logs to go
LOG_BASE=''
if [ -d "$LOG_BASE" ]
then
  Log="$LOG_BASE/$DATE-$media.log"
else
  mkdir "$LOG_BASE"
  chown "$USER":"$GROUP" "$LOG_BASE"
  Log="$LOG_BASE/$DATE-$media.log"
fi
##################################################################################################

if [[ "$media" == "movies" ]]
then
  rsync "${Options[@]}" --log-file="$Log" "$LMOVIES" "$RMOVIES"
  AdjustPerms "$RMOVIES"
elif [[ "$media" == "homemov" ]]
then
  rsync "${Options[@]}" --log-file="$Log" "$LHV" "$RHV"
  AdjustPerms "$RHV"
elif [[ "$media" == "music" ]]
then
  rsync "${Options[@]}" --log-file="$Log" "$LMUSIC" "$RMUSIC"
  AdjustPerms "$RMUSIC"
elif [[ "$media" == "tv" ]]
then
  rsync "${Options[@]}" --log-file="$Log" "$LTV" "$RTV"
  AdjustPerms "$RTV"
elif [[ "$media" == "other" ]]
then
  printf "What would you like to backup? \(Enter full path. Trailing slash
  matters\)"
  read -r src
  printf "Where would you like to back it up to? \(Enter full path\)"
  read -r dest
  rsync "${Options[@]}" --log-file="$Log" "$src" "$dest"
else
  Usage
fi
